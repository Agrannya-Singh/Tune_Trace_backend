"""Create initial database tables

Revision ID: fdd1cef30bfb
Revises: 
Create Date: 2025-09-20 19:44:36.615879

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'fdd1cef30bfb'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('song_metadata',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('video_id', sa.String(length=64), nullable=False, comment='YouTube video ID.'),
    sa.Column('title', sa.String(length=512), nullable=False),
    sa.Column('artist', sa.String(length=256), nullable=False, comment='Typically the YouTube channel title.'),
    sa.Column('genre', sa.String(length=128), nullable=True),
    sa.Column('tags', sa.Text(), nullable=True, comment='Comma-separated tags from YouTube.'),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('video_id', name='uq_video_id')
    )
    op.create_index(op.f('ix_song_metadata_genre'), 'song_metadata', ['genre'], unique=False)
    op.create_index(op.f('ix_song_metadata_video_id'), 'song_metadata', ['video_id'], unique=False)
    op.drop_index(op.f('ix_query_cache_query'), table_name='query_cache')
    op.drop_table('query_cache')
    op.drop_index(op.f('ix_video_features_video_id'), table_name='video_features')
    op.drop_table('video_features')
    op.add_column('user_liked_songs', sa.Column('song_id', sa.Integer(), nullable=False))
    op.drop_index(op.f('ix_user_liked_songs_song_name'), table_name='user_liked_songs')
    op.drop_constraint(op.f('uq_user_song'), 'user_liked_songs', type_='unique')
    op.create_unique_constraint('uq_user_song', 'user_liked_songs', ['user_id', 'song_id'])
    op.create_foreign_key(None, 'user_liked_songs', 'song_metadata', ['song_id'], ['id'], ondelete='CASCADE')
    op.drop_column('user_liked_songs', 'song_name')
    op.alter_column('users', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               comment='The unique external identifier for the user.',
               existing_nullable=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('users', 'user_id',
               existing_type=sa.VARCHAR(length=128),
               comment=None,
               existing_comment='The unique external identifier for the user.',
               existing_nullable=False)
    op.add_column('user_liked_songs', sa.Column('song_name', sa.VARCHAR(length=512), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'user_liked_songs', type_='foreignkey')
    op.drop_constraint('uq_user_song', 'user_liked_songs', type_='unique')
    op.create_unique_constraint(op.f('uq_user_song'), 'user_liked_songs', ['user_id', 'song_name'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_user_liked_songs_song_name'), 'user_liked_songs', ['song_name'], unique=False)
    op.drop_column('user_liked_songs', 'song_id')
    op.create_table('video_features',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('video_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('channel_title', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('tags', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('view_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('duration', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('video_features_pkey')),
    sa.UniqueConstraint('video_id', name=op.f('uq_video_id'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_video_features_video_id'), 'video_features', ['video_id'], unique=False)
    op.create_table('query_cache',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('query', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('best_video_id', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('query_cache_pkey')),
    sa.UniqueConstraint('query', name=op.f('uq_query'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_query_cache_query'), 'query_cache', ['query'], unique=False)
    op.drop_index(op.f('ix_song_metadata_video_id'), table_name='song_metadata')
    op.drop_index(op.f('ix_song_metadata_genre'), table_name='song_metadata')
    op.drop_table('song_metadata')
    # ### end Alembic commands ###
